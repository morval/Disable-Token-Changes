// FrameWork Script
//
// copyright pug games 2014
// please feel free to use this script, change it, add to it in any way you feel
// Script created by Roll20 user Konrad J.

// these are the CONSTANTS for the FrameWork functions
var fwCONSTANTS = {
    COMMANDSEPERATOR : " ",
    GMIDS : ["all"], //put your Roll20 UserID# here
    dtcSCRIPTCOMMAND : "!!"
};

// these are the Globals for the FrameWork functions
var fwGlobal = {
	logToConsoleOn : false
};

function fwLtC(logMsg){
	if (fwGlobal.logToConsoleOn === true) {
		log(logMsg);
	}
}

function fwIsGM(playerid) {
	var player = getObj('player', playerid);
	var d20userid = player.get('_d20userid');
	var IsGM = false;
	
	if (fwCONSTANTS.GMIDS.indexOf(d20userid) >= 0 || fwCONSTANTS.GMIDS.indexOf("all") >= 0) {
		IsGM = true;
	}
	fwLtC("Is GM: " + IsGM);
	return IsGM;
}

function fwFindCommand(commandStringToFind, commands) {
	var i=0;
	var len = commands.length;
	var result = {
		found : "false",
		parm : ""
	};
	for (i; i<len; i++) {
		if (commands[i].indexOf(commandStringToFind) === 0) {
			result.found = true;
			result.parm = commands[i].substr(commandStringToFind.length);
			i=len;
		}
	}
    fwLtC("Command: " + result);
	return result; 
}

var processScriptTabs = function(msg) {
    // this will run the various other scripts depending upon the chat
    // window command.  Just add another Case statement to add a new command.

    var chatCommand = msg.content;
	var script = chatCommand.substr(0, chatCommand.indexOf(fwCONSTANTS.COMMANDSEPERATOR));
	chatCommand = chatCommand.replace(script + fwCONSTANTS.COMMANDSEPERATOR, "");

	fwLtC("Script: " + script);
	fwLtC("Chat Command: " + chatCommand);
    switch(script) {
    	case fwCONSTANTS.dtcSCRIPTCOMMAND:
			if (fwIsGM(msg.playerid) === true) {
				processDisableTokenChanges(chatCommand, msg);
			}
			break;
    }
};

//
// Disable Token Changes
//
// ! rot off|on
// ! size off|on
// ! move off|on
//
var dtcCONSTANTS = {
};

var dtcGlobal = {
	rotationEnable : true,
	moveEnable : true,
	sizeEnable : true
};

function processDisableTokenChanges(chatCommand, msg){
	var commands = chatCommand.split(fwCONSTANTS.COMMANDSEPERATOR);
	
	switch(commands[0]) {
		case "rot":
			if (fwIsGM(msg.playerid) === true) {
				switch(commands[1]) {
					case 'on':
						dtcGlobal.rotationEnable = true;
					break;
					case 'off':
						dtcGlobal.rotationEnable = false;
					break;
				}
			}
		break;
		case "move":
			if (fwIsGM(msg.playerid) === true) {
				switch(commands[1]) {
					case 'on':
						dtcGlobal.moveEnable = true;
					break;
					case 'off':
						dtcGlobal.moveEnable = false;
					break;
				}
			}
		break;
		case "size":
			if (fwIsGM(msg.playerid) === true) {
				switch(commands[1]) {
					case 'on':
						dtcGlobal.sizeEnable = true;
					break;
					case 'off':
						dtcGlobal.sizeEnable = false;
					break;
				}
			}
		break;
	}
}

on("chat:message", function(msg) {
    // returns the chat window command entered
    if (msg.type != 'api') {
        return;
    }
	fwLtC("Chat Msg: " + msg);
    return processScriptTabs(msg);
});

on("change:graphic:rotation", function(obj, prev) {    
    if (dtcGlobal.rotationEnable ===  false) {
		obj.set("rotation",prev.rotation);
		return;
	}
});

on("change:graphic:left", function(obj, prev) {    
	if (dtcGlobal.moveEnable ===  false) {
		obj.set("left",prev.left);
	}
    return;
});

on("change:graphic:top", function(obj, prev) {    
	if (dtcGlobal.moveEnable ===  false) {
		obj.set("top",prev.top);
	}
    return;
});

on("change:graphic:width", function(obj, prev) {    
	if (dtcGlobal.sizeEnable ===  false) {
		obj.set("width",prev.width);
		obj.set("left",prev.left);
		obj.set("top",prev.top);		
	}
    return;
});

on("change:graphic:height", function(obj, prev) {    
	if (dtcGlobal.sizeEnable ===  false) {
		obj.set("height",prev.height);
		obj.set("left",prev.left);		
		obj.set("top",prev.top);
	}
    return;
});
